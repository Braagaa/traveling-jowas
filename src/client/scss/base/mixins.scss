@use './vars';

@mixin displayMap($map) {
	@each $k, $v in $map {
		@if $v {
			#{$k}: #{$v};
		}
	}
}

@mixin displayAppendMap($append, $map) {
	@each $k, $v in $map {
		@if $v {
			#{$append}-#{$k}: #{$v};
		}
	}
}

@mixin container($width, $height, $bg: null) {
	@include displayMap((width: $width, height: $height, background-color: $bg));
}

@mixin trdl($prop, $t: null, $r: null, $b: null, $l: null) {
	$dirs: (top- $t, right- $r, bottom- $b, left- $l);
	@include displayMap($dirs);
}

@mixin flex($ai: null, $jc: null, $fd: null) {
	$props: (display: flex, align-items: $ai, justify-content: $jc, flex-direction: $fd);
	@include displayMap($props);	
}

@mixin center() {
	display: flex;
	align-items: center;
	justify-content: center;
}

@mixin position($d, $t: null, $r: null, $b: null, $l: null) {
	$props: (position: $d, top: $t, right: $r, bottom: $b, left: $l);
	@include displayMap($props);
}

@mixin transition($p: null, $d: null, $tf: null, $de: null) {
	$props: (timing-function: $tf, duration: $d, property: $p, delay: $de);
	@include displayAppendMap(transition, $props);
}

@mixin hide() {
	visibility: hidden;
	opacity: 0;
}

@mixin breakpoint($point) {
	@if $point == 'x-large' {
		@media only screen and (min-width: vars.$xl) {
			@content;
		}
	}
	@else if $point == 'large' {
		@media only screen and (min-width: vars.$lg) {
			@content;
		}
	}
	@else if $point == 'medium' {
		@media only screen and (min-width: vars.$md) {
			@content;
		}
	}
}

@mixin exclude($e, $n) {
	#{$e}:nth-child(n+#{$n}) {
		@content;
	}
}
@mixin excludeFirst($e) {
	@include exclude($e, 2) {
		@content;
	}
}
